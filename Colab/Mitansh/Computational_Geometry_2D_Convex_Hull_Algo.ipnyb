{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPaEYjwX/0em7g9Gb7MsEJc",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlecTraas/computational-geo-lab/blob/main/Colab/Mitansh/Computational_Geometry_2D_Convex_Hull_Algo.ipnyb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "HTNvX3L19y0A"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#Sort by x-value\n",
        "points=np.array([1,1],[2,2],[3,4],[5,6],[7,8])\n",
        "x_vals=points[ : ,0]\n",
        "indices=np.argsort(x_vals)\n",
        "new_points=points[indices]\n",
        "n=len(new_points)\n",
        "#finding leftmost and rightmost point\n",
        "lp=new_points[0]\n",
        "rp=new_points[n]\n",
        "#separating points into upperset and lowerset\n",
        "#first attempting code for if lp and rp are in a straight line\n",
        "upper=np.array()\n",
        "lower=np.array()\n",
        "for p in points:\n",
        "  if (p[ : ,1]>=lp[ : ,1]):\n",
        "    upper.append(p)\n",
        "  else:\n",
        "    lower.append(p)\n",
        "#function to compute distances of points from line using vector cross product\n",
        "def distance():\n",
        "  dist=(np.cross(rp-lp,points-lp)/norm(rp-lp))\n",
        "  pf=points[np.argmax(dist)] #Thanks Kai!\n",
        "  return pf\n",
        "\n"
      ]
    }
  ]
}